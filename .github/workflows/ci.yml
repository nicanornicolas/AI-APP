name: CI/CD Pipeline

# Trigger the workflow on push to main branch and pull requests
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Set environment variables for the entire workflow
env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.12'

jobs:
  # Backend testing and linting
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Create virtual environment
      run: uv venv
      working-directory: ./backend
    
    - name: Install dependencies
      run: uv sync
      working-directory: ./backend
    
    - name: Run backend linting
      run: |
        uv run flake8 src/ --max-line-length=100 --exclude=__pycache__,*.pyc
      working-directory: ./backend
    
    - name: Run backend tests
      run: |
        uv run python -m pytest tests/ -v --tb=short
      working-directory: ./backend
      env:
        # Set test environment variables
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
        JWT_KEY: ${{ secrets.JWT_KEY }}

  # Frontend testing and linting
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./frontend
    
    - name: Run frontend linting
      run: npm run lint
      working-directory: ./frontend
    
    - name: Build frontend
      run: npm run build
      working-directory: ./frontend
    
    - name: Run frontend tests (if available)
      run: |
        if npm run | grep -q "test"; then
          npm run test
        else
          echo "No test script found, skipping frontend tests"
        fi
      working-directory: ./frontend

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Optional deployment job (runs only on main branch)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production..."
        echo "Add your deployment commands here"
        # Example deployment commands:
        # - Deploy backend to Railway, Heroku, or AWS
        # - Deploy frontend to Vercel, Netlify, or GitHub Pages
        # - Update environment variables
        # - Run database migrations
    
    # Uncomment and configure for actual deployment
    # - name: Deploy Frontend to Vercel
    #   uses: amondnet/vercel-action@v25
    #   with:
    #     vercel-token: ${{ secrets.VERCEL_TOKEN }}
    #     vercel-org-id: ${{ secrets.ORG_ID }}
    #     vercel-project-id: ${{ secrets.PROJECT_ID }}
    #     working-directory: ./frontend
    
    # - name: Deploy Backend to Railway
    #   uses: railway-app/railway-deploy@v1
    #   with:
    #     api-token: ${{ secrets.RAILWAY_TOKEN }}
    #     project-id: ${{ secrets.RAILWAY_PROJECT_ID }}
    #     working-directory: ./backend 